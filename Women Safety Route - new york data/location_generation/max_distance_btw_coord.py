from math import radians, sin, cos, sqrt, atan2
from itertools import combinations

def haversine(lat1, lon1, lat2, lon2):
    R = 6371  # Radius of Earth in kilometers
    dlat = radians(lat2 - lat1)
    dlon = radians(lon2 - lon1)
    a = sin(dlat / 2)**2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))
    return R * c

# Paste your lat/lon data here as two lists:
latitudes = [40.74824320024852, 40.75057700646688, 40.75083909907612, 40.75812095390535, 40.731360678299, 40.73539785604513, 40.75856590351697, 40.74985509583679, 40.73125759597995, 40.72496926168325, 40.73710522892537, 40.74978066831234, 40.73674121186265, 40.74482611056035, 40.74387603006983, 40.75724925252236, 40.76572916976822, 40.72919313866907, 40.75567317858561, 40.74623419830452, 40.73360439112273, 40.74807070576344, 40.75934261074114, 40.72841661476453, 40.73637953733218, 40.7609542073833, 40.75331767793492, 40.72518170759591, 40.7400461140816, 40.74209620040558, 40.75503947044712, 40.75305275090884, 40.73284828131155, 40.75038137082496, 40.74746008960899, 40.759683205204, 40.75032816512953, 40.74077696416769, 40.72791922747654, 40.74191596898865, 40.74743511998196, 40.75243062610118, 40.75401815815159, 40.75461924534481, 40.75583792497979, 40.74204117359164, 40.7293636535487, 40.76676842118233, 40.75310369185266, 40.76108234344288, 40.73929902794672, 40.74184894994014, 40.75853537556232, 40.75694633803501, 40.73503135541941, 40.74422332238863, 40.75622361929059, 40.74921750281805, 40.75842080400336, 40.7385616144058, 40.7323163986276, 40.75036495067326, 40.75946884453123, 40.75172261995026, 40.73163119242256, 40.75165313631373, 40.74330371813281, 40.72799548038213, 40.74847820189744, 40.75934509725126, 40.73456631644027, 40.75431809929528, 40.75920724143178, 40.76058690407451, 40.72344485575784, 40.75608225896129, 40.74720113080608, 40.74217284168541, 40.75595399630801, 40.72730104936672, 40.74432706509946, 40.75101122291183, 40.74410415034006, 40.76387982840509, 40.75277235927258, 40.75774338869491, 40.74627864314523, 40.75429739605477, 40.74992923088533, 40.72746956240574, 40.74792282882824, 40.75038954863334, 40.75731444016323, 40.74799568144429, 40.74429666620373, 40.75454733242822, 40.72747216265145, 40.75252100508699, 40.75494455974496, 40.74805272787287]
longitudes = [-73.98607893014898, -73.99346190022933, -73.98913901873878, -73.98561770524518, -73.99713542107983, -73.98990297150544, -73.9809954973572, -73.99288704294781, -73.98072544118014, -73.98604391177852, -73.98538736545574, -73.99466481261811, -74.00825288360392, -73.98409222762554, -73.99074148825785, -73.99164882103334, -73.98002229028022, -74.00781050744203, -73.98349914713086, -73.97782328504871, -73.98089782488906, -73.99191690340106, -73.98794348883031, -74.00222269509491, -73.99860558544212, -73.99253182506301, -74.00332072433278, -73.99385880852559, -73.97795379957618, -73.99635036134964, -73.99102552778774, -73.99688679049922, -73.98773008302507, -73.99684974116647, -73.9967899738108, -73.99652770016128, -73.9768619870684, -73.98390030077559, -74.00530878745433, -73.99787712056585, -74.00220743994672, -73.99425450456809, -73.98405918662925, -73.9883282296435, -73.98144754488963, -73.98569958054858, -73.99554292567912, -73.98728343772832, -74.00043461322687, -73.97842692839936, -73.9977525770807, -73.99073882193122, -73.99744765509614, -73.98958977682634, -73.98703442752861, -73.9970858614371, -73.98460369655572, -73.99471038143123, -74.00018565701012, -74.00098977142927, -73.99594494054489, -73.97834855773253, -73.99103814369437, -73.98475869822512, -73.99536325961205, -73.98605116617793, -73.98548458003778, -74.00311651899278, -73.9777927647502, -73.99230597912181, -73.97807894479733, -73.97762644224184, -73.98339440270664, -73.99342683362718, -73.99934072092897, -73.97432810617171, -73.99139381822823, -73.99994230618059, -73.99169387048391, -74.00259367579869, -73.98642080794409, -73.99154067131235, -73.9959047505731, -73.98459682808685, -73.99906545051503, -73.99454735564147, -73.9911406203838, -73.98677854785423, -73.98045286137994, -73.98718155660633, -73.97788928534648, -73.9839595891738, -73.97575834654228, -73.98949214472643, -73.98549089194785, -73.98763188196551, -73.99609326262133, -74.00024274142906, -73.99366822000084, -74.00529681144728]

# Step 1: Combine into (lat, lon) tuples
coords = list(zip(latitudes, longitudes))

# Step 2: Compare all unique pairs
max_distance = 0
max_pair = None

for (lat1, lon1), (lat2, lon2) in combinations(coords, 2):
    distance = haversine(lat1, lon1, lat2, lon2)
    if distance > max_distance:
        max_distance = distance
        max_pair = ((lat1, lon1), (lat2, lon2))

# Step 3: Output result
print(f"📏 Max linear distance: {max_distance:.3f} km")
print(f"Between:\n → Point A: {max_pair[0]}\n → Point B: {max_pair[1]}")
